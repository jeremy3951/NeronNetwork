#include <math.h>
#include <stdint.h>
#include <time.h>
double sigmoid(double a){
    double o = ( 1 / (1+ exp(-a)));
    return o;
}

float ReLU(float x) {

    union {
        float f;
        int32_t i;
    } out = {.f = x}; /* 將資料存入 union */

    out.i &= ~(out.i >> 31);

    return out.f;
}

/* learning rate */
double lr = 0.5 ;


static uint64_t splitmix_x;
static inline uint64_t splitmix() {

    splitmix_x += 0x9E3779B97F4A7C15;
    uint64_t z = splitmix_x;
    z = (z ^ (z >> 30)) * 0xBF58476D1CE4E5B9;
    z = (z ^ (z >> 27)) * 0x94D049BB133111EB;
    return z ^ (z >> 31);
}
static void splitmix_init() {
    /* Hopefully, ASLR makes our function address random */
    uintptr_t x = (uintptr_t)((void *) &splitmix_init);
    struct timespec time;
    clock_gettime(CLOCK_MONOTONIC, &time);
    x ^= (uintptr_t) time.tv_sec;
    x ^= (uintptr_t) time.tv_nsec;
    splitmix_x = x;

    /* do a few randomization steps */
    uintptr_t max = ((x ^ (x >> 17)) & 0x0F) + 1;
    for (uintptr_t i = 0; i < max; i++)
        splitmix();
}

#define ANN_RAND() (((double) splitmix()) / UINT64_MAX)

void backward ( double *w, double *in, double *res , double *gradient , int bias ){

    double dc1 = gradient[8] * gradient[10];
    double dc2 = gradient[9] * gradient[10];

    double df = ( res[0+bias] * (1-res[0+bias]) ) * dc1;//0123---8
    double dg = ( res[1+bias] * (1-res[1+bias]) ) * dc2;//4567---9

    int i = 7;
    while(i>=0){
       gradient[i] = ( i==7? dg:df);
       w[i] -= lr * gradient[i] ;
       printf("g%d %lf \n",i , (gradient[i]) );

       for(int j =0;j<3; j++){
            gradient[i-j-1] = *(in+bias+j ) *gradient[i];
            w[i-j-1] -= lr * gradient[i-j-1] ;
            printf("g%d %lf \n",i-j-1 , (gradient[i]) );

        }
        i-=4;
    }
    printf("\n");

}

void backward2 (int i , double *in , double *w , double *res , double *gradient ,double *ans){  //( process , gradient , output)

    gradient[10] = res[3*i+2] * ( 1- res[3*i+2] ) * ans[i];
    w[10] -= lr * gradient[10];
    printf("g10 %lf \n",(gradient[10]) );

    gradient[9]  = res[3*i+1] * gradient[10] ;
    w[9] -= lr * gradient[9];
    printf("g9 %lf \n",(gradient[9]) );

    gradient[8]  = res[3*i] * gradient[10] ;
    w[8] -= lr * gradient[8];
    printf("g8 %lf \n",(gradient[8]) );

    backward( w , in , res , gradient , 3*i );

}


double test (double *in , int row , double *weight ){

    double *output = malloc(sizeof(double)*3) ;
    double *w = weight ;

    for(int i = 0 ; i <3;i++)
        output[i] = 0.0 ;

    for(int k = 0; k<2;k++){
           for(int j = 0;j<3;j++){
               output[k] += *w++ * *(in+(row*3)+j) ;
           }
           output[k] += *w++;
           output[k] = sigmoid(output[k]);
       }
                /*output layers*/
       for(int k = 0; k<2;k++){
           output[2] += *w++ * output[k];
       }
       output[2] += *w ;
       output[2] =sigmoid(output[2]); // 神經元的 output


    return output[2];
}


int main(){
    splitmix_init();
   /* input */
   const double total_in[8][3] =
   {
        {0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1},
        {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1},
    };
   double *ptr_to_in = total_in;

   const double total_output[8] = {

        0, 1 , 1, 1 , 0, 1, 0, 1,
    };


   /* weight */
   double *w = malloc(sizeof(double)*11) ;
   double *temp_w = w;
   double *gradient = malloc(sizeof(double)*11) ;
   double *process = malloc(sizeof(double)* 8 *3);

   for(int i=0;i<11;i++){
        w[i] = ANN_RAND() -0.5;
        printf("w%d %lf \n" , i , w[i]);
        gradient[i] = 0.0;
   }

int nums = 2 ;

double *temp = malloc(sizeof(double)*nums);

for(int times = 0; times <100 ; times ++){

   for(int s=0;s<nums;s++){
        temp_w = w;
        for(int i=3*s;i<(3*s+3);i++){
            process[i] = 0.0;
           }

        /*------------------------------forward--------------------------*/
           for(int k = 0; k<2;k++){       /*input-hidden*/
               for(int j = 0;j<3;j++){
                   process[k+3*s] += *temp_w++ * total_in[s][j] ;
               }

               process[k+3*s] += *temp_w++;

               process[k+3*s] = sigmoid(process[k+3*s]);
           }
           for(int k = 0; k<2;k++){       /*output layers*/
               process[2+3*s] += *temp_w++ * process[k+3*s];
           }
           process[2+3*s] += *temp_w ;
           process[2+3*s] =sigmoid(process[2+3*s]); // 神經元的 output

        }

        /*------------------------------backward--------------------------*/
           printf("----------------Round%d--------------\n" , times+1);
           double earlystop = 0.0;
           for(int i=0;i<nums;i++){
               temp[i] = ( process[2+3*i] >= 0.5? 1.0:0.0 ) - total_output[i];
               earlystop += temp[i] * temp[i] ;
               printf("res%d %lf - ", i , ( process[2+3*i] >= 0.5? 1.0:0.0 ) );
               printf("ans%d %lf \n", i , (total_output[i]) );

               backward2( i , ptr_to_in , w , process , gradient , temp);
           }

           if(earlystop ==0 ){
                printf("-------------stop in round %d --------------" , times+1);
                return 0;
           }

}
// predict
for(int i=0;i<nums;i++){
    printf("%lf \n", (test(ptr_to_in , i , w)>=0.5?1.0:0.0 ) );
}

   return 0;
}
