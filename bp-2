#include <math.h>
#include <stdint.h>

double sigmoid(double a){
    double o = ( 1 / (1+ exp(-a)));
    return o;
}
static uint64_t splitmix_x;
static inline uint64_t splitmix() {

    splitmix_x += 0x9E3779B97F4A7C15;
    uint64_t z = splitmix_x;
    z = (z ^ (z >> 30)) * 0xBF58476D1CE4E5B9;
    z = (z ^ (z >> 27)) * 0x94D049BB133111EB;
    return z ^ (z >> 31);
}

#define ANN_RAND() (((double) splitmix()) / UINT64_MAX)

void backward (double *in, double *res , double *gradient , int bias){

    gradient[3] = ( res[0] * (1-res[0]) ) * gradient[8-bias];

    gradient[2] = in[2] * gradient[3] ;
    gradient[1] = in[1] * gradient[3] ;
    gradient[0] = in[0] * gradient[3] ;

}

void backward2 (double *res , double *gradient , double ans){

    double sub = res[2] - ans;
    double squ = sub* sub ;

    double dx = 1.0 ;

    gradient[11] = 2 * sub * dx ;

    gradient[10] = ( res[2] * (1-res[2]) ) * (gradient[11]);
    gradient[9] = res[1] * gradient[10] ;
    gradient[8] = res[0] * gradient[10] ;
}

int main(){
   /* input */
   double in[3] = {1.0 , 0.0 , 1.0};
   double ans = 1.0;
   /* learning rate */
   double lr = 0.1 ;
   /* weight */
   double *x = malloc(sizeof(double)*12) ;
   double *xx = x;
   double *gradient = malloc(sizeof(double)*12) ;

   printf("-----------Before------------- \n");

   for(int i=0;i<12;i++){
    x[i]= ANN_RAND() -0.5;
    printf("w%d : %lf  \n" , i,x[i]);
   }

   double *nero = malloc(sizeof(double)*3);

/*------------------------------forward--------------------------*/
            /*input-hidden*/
    for(int times=0;times<50;times++){
        xx = x;
        for(int i=0;i<3;i++){
            nero[i]= 0.0;
       }
       for(int k = 0; k<2;k++){

           for(int j = 0;j<3;j++){
               nero[k] += *xx++ * in[j] ;
           }
           nero[k] += *xx++;
           nero[k] = sigmoid(nero[k]);
       }


                /*output layers*/
       for(int k = 0; k<2;k++){
           nero[2] += *xx++ * nero[k];
       }
       nero[2] += *xx ;
       nero[2] = sigmoid(nero[2]);
       x[11] = nero[2];
    /*------------------------------backward--------------------------*/
       backward2( nero , gradient , ans);
       backward( in , nero , gradient , 0) ;
       backward( in , nero+1 , gradient+4 , 3) ;
    /*------------------------------update--------------------------*/
    printf("-----------Round%d------------- \n" , times);
       for(int i=0;i<12;i++){
           x[i] -= lr * gradient[i];
           printf("w%d : %lf  \n" , i,x[i]);
       }
    }

   return 0;
}
